info (
	title: "hawk"
)
type LoginRequest {
	Name     string `json:"name"`
	Password string `json:"pass"`
}
type CaptchaReq {
	Email string `json:"email"`
}
type RegisterReq {
	Code        string `json:"code"`
	UserName    string `json:"userName"`
	PassWord    string `json:"passWord"`
	Name        string `json:"name"`
	Email       string `json:"email"`
	Gender      string `json:"gender"`
	Age         int64  `json:"age"`
	Interest    string `json:"interest"`
	PhoneNumber int64  `json:"phoneNumber"`
}
type UpdateUserInformationReq {
	UserName    string `json:"userName"`
	PassWord    string `json:"passWord"`
	Name        string `json:"name"`
	Email       string `json:"email"`
	Gender      string `json:"gender"`
	Age         int64  `json:"age"`
	Interest    string `json:"interest"`
	PhoneNumber int64  `json:"phoneNumber"`
}

type HttpCode {
	Message string      `json:"message"`
	Code    int         `json:"code"`
	Data    interface{} `json:"data"`
}

@server (
	group: user
)
service hawk {
	@handler Captcha
	post /Captcha (CaptchaReq) returns (HttpCode)
	
	@handler Register
	post /Register (RegisterReq) returns (HttpCode)
	
	@handler Login
	post /login(LoginRequest) returns (HttpCode);
}

@server (
	// 定义一个鉴权控制的中间件，多个中间件以英文逗号,分割，如 Middleware1,Middleware2,中间件按声明顺序执行
	jwt: Auth
	group: user
)

service hawk {
	@handler GetUserInformation
	get /GetUserInformation returns (HttpCode)
	
	@handler UpdateUserInformation
	put /UpdateUserInformation (UpdateUserInformationReq) returns (HttpCode)
}

type AddArticleReq {
	Title   string `json:"title"`
	Content string `json:"content"`
	Label   string `json:"label"`
}
type AddDraftReq {
	Title   string `json:"title"`
	Content string `json:"content"`
	Label   string `json:"label"`
}
type UpdateArticleReq {
	ArticleId int64  `json:"articleId"`
	Content   string `json:"content"`
}

type ExamineReq {
	ArticleId int64 `form:"articleId"`
}
type ExamineArticlesReq {
	ArticleId int64 `form:"articleId"`
	PageSize  int64 `form:"pageSize"`
}
type DeleteReq {
	ArticleId int64 `json:"articleId"`
}
type LikeReq {
	ArticleId int64 `json:"articleId"`
}
type ListTitleReq {
	Title     string `json:"title"`
	ArticleId int64  `json:"articleId"`
	PageSize  int    `json:"pageSize"`
}
type HttpCodeResp {
	Code    int         `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}

@server (
	prefix:     /article // 对当前 Foo 语法块下的所有路由，新增 /article 路由前缀.
	group:      article //对当前Foo下的所有路由，路由归并到article目录下
	jwt: Auth
)
service hawk {
	// 定义请求体和响应体，写文章。
	@handler  addArticle
	post /addArticle (AddArticleReq) returns (HttpCodeResp)
	
	//定义结构体和响应体，将文章放进草稿箱
	@handler addDraft
	post /addDraft (AddDraftReq)returns(HttpCodeResp)
	// 定义只有请求体的接口，更新文章
	@handler updateArticle
	post /updateArticle (UpdateArticleReq) returns (HttpCodeResp)
	// 定义请求体和响应体，当搜索文章的时候，展示文章的题目，并且进行分页
	@handler listArticle
	get /listArticle (ListTitleReq)returns (HttpCodeResp)
	
	// 定义请求体和响应体，查询单个文章
	@handler examineArticle
	get /examineArticle (ExamineReq) returns (HttpCodeResp)
	
	//定义响应体，获取首页的六篇热度最高的文章
	@handler examineArticles
	get /examineArticles returns (HttpCodeResp)
	// 删除文章
	@handler deleteArticle
	delete /deleteArticle (DeleteReq)returns (HttpCodeResp)
	//对文章进行点赞
	@handler likeArticle
	post /likeArticle (LikeReq)returns(HttpCodeResp)
}

type (
	CreateCommentReq {
		ArticleId int64  `json:"articleId"`
		Comment   string `json:"comment"`
	}
	DeleteCommentReq {
		ArticleId int64 `json:"articleId"`
		CommentId int64 `json:"commentId"`
	}
	UpdateCommentReq {
		ArticleId int64  `json:"articleId"`
		CommentId int64  `json:"commentId"`
		Comment   string `json:"comment"`
	}
	GetAllCommentReq {
		ArticleId int64 `json:"articleId"`
	}
	PostCommentLikeReq {
		ArticleId int64 `json:"articleId"`
		CommentId int64 `json:"commentId"`
	}
	CommentToCommentReq {
		CommmentId int64  `json:"commmentId"`
		Comment    string `json:"comment"`
	}
)

@server (
	group: comment
	prefix: /comment
	jwt: Auth
)
service hawk {
	//为博客添加评论
	@handler CreateComment
	post /article (CreateCommentReq) returns (HttpCode)
	//删除指定博客的指定评论
	@handler DeleteComment
	delete /article (DeleteCommentReq) returns (HttpCode)
	//修改指定博客的指定评论
	@handler UpdateComment
	put /article (UpdateCommentReq) returns (HttpCode)
	//获取指定博客的所有评论或者是指定评论的所有跟评论
	@handler GetComment
	get /article (GetAllCommentReq) returns (HttpCode)
	//用户可以为评论点赞,也可也为评论的评论点赞
	@handler PostCommentLike
	post /article/like (PostCommentLikeReq) returns (HttpCode)
	//用户对评论进行评论
	@handler CommentToComment
	post /articletoc (CommentToCommentReq) returns (HttpCode)
}
